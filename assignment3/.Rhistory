color = "yellow", size = 2)
from <- "Bude North Cornwall Cricket Club"
to <- "Crooklets Inn"
route_df <- route(from, to,structure = "route")
ggmap(map_road) +
geom_point(aes(x =  -4.552314 , y = 50.835289), color = "red", size = 2) +
geom_point(aes(x = -4.5510, y = 50.8362), color = "brown", size = 2) +
geom_path(aes(x = lon, y = lat), colour = "blue", size = 1, data = route_df, lineend = "round")
ggmap(map_watercolor) +
geom_point(aes(x =  -4.552314 , y = 50.835289), color = "red", size = 2) +
geom_point(aes(x = -4.5510, y = 50.8362), color = "brown", size = 2) +
geom_path(aes(x = lon, y = lat), colour = "blue", size = 1, data = route_df, lineend = "round")
knitr::opts_chunk$set(echo = TRUE)
library(ggmap)
library(tidyverse)
map_road <- get_googlemap(center =c(-4.543678,50.82664), zoom = 14, maptype = "roadmap")
ggmap(map_road)
map_watercolor <- get_map(location =c(-4.543678,50.82664),source="stamen", zoom = 14, maptype = "watercolor")
ggmap(map_watercolor)
ggmap(map_road) +
geom_point(
aes(x = -4.551312 , y = 50.83074),
color = "red", size = 2) +
geom_point(
aes(x =  -4.552314 , y = 50.835289),
color = "blue", size = 2) +
geom_point(
aes(x = -4.553962 , y = 50.83587),
color = "green", size = 2) +
geom_point(
aes(x = -4.5540, y = 50.8326),
color = "yellow", size = 2)
ggmap(map_watercolor) +
geom_point(
aes(x = -4.551312 , y = 50.83074),
color = "red", size = 2) +
geom_point(
aes(x =  -4.552314 , y = 50.835289),
color = "blue", size = 2) +
geom_point(
aes(x = -4.553962 , y = 50.83587),
color = "green", size = 2) +
geom_point(
aes(x = -4.5540, y = 50.8326),
color = "yellow", size = 2)
from <- "Bude North Cornwall Cricket Club"
to <- "Crooklets Inn"
route_df <- route(from, to,structure = "route")
ggmap(map_road) +
geom_point(aes(x =  -4.552314 , y = 50.835289), color = "red", size = 2) +
geom_point(aes(x = -4.5510, y = 50.8362), color = "brown", size = 2) +
geom_path(aes(x = lon, y = lat), colour = "blue", size = 1, data = route_df, lineend = "round")
ggmap(map_watercolor) +
geom_point(aes(x =  -4.552314 , y = 50.835289), color = "red", size = 2) +
geom_point(aes(x = -4.5510, y = 50.8362), color = "brown", size = 2) +
geom_path(aes(x = lon, y = lat), colour = "blue", size = 1, data = route_df, lineend = "round")
devtools::install_github("rstudio/rmarkdown")
install.packages('devtools')
devtools::install_github("rstudio/rmarkdown")
library(ggmap)
suppressMessages(library(“tidyverse”))
suppressMessages(library(“tidyverse”))
suppressMessages(library("tidyverse"))
library(ggmap)
suppressMessages(library("tidyverse"))
knitr::opts_chunk$set(echo = TRUE)
library(ggmap)
suppressMessages(library("tidyverse"))
map_road <- get_googlemap(center =c(-4.543678,50.82664), zoom = 14, maptype = "roadmap")
ggmap(map_road)
map_watercolor <- get_map(location =c(-4.543678,50.82664),source="stamen", zoom = 14, maptype = "watercolor")
ggmap(map_watercolor)
ggmap(map_road) +
geom_point(
aes(x = -4.551312 , y = 50.83074),
color = "red", size = 2) +
geom_point(
aes(x =  -4.552314 , y = 50.835289),
color = "blue", size = 2) +
geom_point(
aes(x = -4.553962 , y = 50.83587),
color = "green", size = 2) +
geom_point(
aes(x = -4.5540, y = 50.8326),
color = "yellow", size = 2)
ggmap(map_watercolor) +
geom_point(
aes(x = -4.551312 , y = 50.83074),
color = "red", size = 2) +
geom_point(
aes(x =  -4.552314 , y = 50.835289),
color = "blue", size = 2) +
geom_point(
aes(x = -4.553962 , y = 50.83587),
color = "green", size = 2) +
geom_point(
aes(x = -4.5540, y = 50.8326),
color = "yellow", size = 2)
from <- "Bude North Cornwall Cricket Club"
to <- "Crooklets Inn"
route_df <- route(from, to,structure = "route")
ggmap(map_road) +
geom_point(aes(x =  -4.552314 , y = 50.835289), color = "red", size = 2) +
geom_point(aes(x = -4.5510, y = 50.8362), color = "brown", size = 2) +
geom_path(aes(x = lon, y = lat), colour = "blue", size = 1, data = route_df, lineend = "round")
ggmap(map_watercolor) +
geom_point(aes(x =  -4.552314 , y = 50.835289), color = "red", size = 2) +
geom_point(aes(x = -4.5510, y = 50.8362), color = "brown", size = 2) +
geom_path(aes(x = lon, y = lat), colour = "blue", size = 1, data = route_df, lineend = "round")
#load data
library(shiny)
runApp('Desktop/assignment3/assignment3.R')
runApp('Desktop/assignment3/assignment3.R')
runApp('Desktop/assignment3/assignment3.R')
runApp('Desktop/assignment3/assignment3.R')
runApp('Desktop/assignment3/assignment3.R')
runApp('Desktop/assignment3/assignment3.R')
runApp('Desktop/assignment3/assignment3.R')
#load data
library(shiny)
library(readr)
A2010 <- read.csv( "bp appre 2010.csv", header = TRUE, stringsAsFactors = FALSE)
source('~/Desktop/assignment3/assignment3.R')
setwd("~/Desktop/assignment3")
#load data
library(shiny)
library(readr)
A2010 <- read.csv( "bp appre 2010.csv", header = TRUE, stringsAsFactors = FALSE)
A2017 <- read.csv("bp appre 2017.csv", header = TRUE, stringsAsFactors = FALSE)
A2000.2017 <- read.csv("PB monthly summaries.csv", header = TRUE, stringsAsFactors = FALSE)
#clean data of BP Apprehensions 2010
rownames(A2010)<-A2010[,1]
A2010 <- subset(A2010, select= -c(Sector))
A2010 <- rbind(A2010, colSums(A2010))
rownames(A2010) <- c(rownames(A2010)[-length(rownames(A2010))], "Total")
## cbind rowSums to dataframd
A2010 <- cbind(A2010,rowSums(A2010))
## rename last column "Totals
colnames(A2010) <- c(colnames(A2010)[-length(colnames(A2010))], "Total")
#clean data of BP Apprehensions 2017
rownames(A2017) <- A2017[,1]
A2017 <- subset(A2017, select= -c(Sector))
A2017 <- rbind(A2017, colSums(A2017))
rownames(A2017) <- c(rownames(A2017)[-length(rownames(A2017))], "Total")
## cbind rowSums to dataframd
A2017 <- cbind(A2017,rowSums(A2017))
## rename last column "Totals
colnames(A2017) <- c(colnames(A2017)[-length(colnames(A2017))], "Total")
#statistics
A2010_sector_mean <- apply(A2010[,1:12],1,mean)
A2010_sector_mean
A2010_month_mean <- apply(A2010[1:9,],2,mean)
A2010_month_mean
A2017_sector_mean <- apply(A2017[,1:12],1,mean)
A2017_sector_mean
View(A2010)
A2017_month_mean <- apply(A2017[1:9,],2,mean)
A2017_month_mean
sector<-cbind(A2010_sector_mean,A2017_sector_mean)
#The maximum sector in 2010 is Tucson and the maximum sector in 2017 is Tio Grande Valley
sector2010<-as.data.frame(t(A2010[1:9,]))
as.character(colnames(sector2010))
sector2010
sector2017<-as.data.frame(t(A2017[1:9,]))
as.character(colnames(sector2017))
sector2017
t.test(sector2010$Tucson,sector2017$`Rio Grande Valley`)
month<-cbind(A2010_month_mean,A2017_month_mean)
#The maximum three months in 2010 are March, April and May
month2010<-as.data.frame((A2010[1:9,6:8]))
as.character(rownames(month2010))
month2010
month2010$sum<-apply(month2010,1,sum)
#The maximum three months in 2017 are October, November and December
month2017<-as.data.frame((A2017[1:9,1:3]))
as.character(rownames(month2017))
month2017
month2017$sum<-apply(month2017,1,sum)
t.test(month2010$sum,month2017$sum)
new_A2000.2017 <- apply(t(A2000.2017[,2:13]),1,rev)
ts <- as.vector(t(new_A2000.2017))
ts
ts2 <- ts(ts,frequency = 13,start = c(2000,10))
ts2
new_A2000.2017_mean <- apply(new_A2000.2017,1,mean)
new_A2000.2017_mean
ts.plot(ts2, gpars=list(xlab="year", ylab="Apprehensions", lty=c(1:3)))
new_A2000.2017 <- apply(t(A2000.2017[,2:13]),1,rev)
ts <- as.vector(t(new_A2000.2017))
ts
ts2 <- ts(ts,frequency = 15,start = c(2000,10))
ts2
new_A2000.2017_mean <- apply(new_A2000.2017,1,mean)
new_A2000.2017_mean
ts.plot(ts2, gpars=list(xlab="year", ylab="Apprehensions", lty=c(1:3)))
ts2 <- ts(ts,frequency = 13,start = c(2000,10))
ts2
new_A2000.2017_mean <- apply(new_A2000.2017,1,mean)
new_A2000.2017_mean
ts.plot(ts2, gpars=list(xlab="year", ylab="Apprehensions", lty=c(1:3)))
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
library(shiny)
library(readr)
A2010 <- read.csv( "bp appre 2010.csv", header = TRUE, stringsAsFactors = FALSE)
A2017 <- read.csv("bp appre 2017.csv", header = TRUE, stringsAsFactors = FALSE)
A2000.2017 <- read.csv("PB monthly summaries.csv", header = TRUE, stringsAsFactors = FALSE)
rownames(A2010)<-A2010[,1]
A2010 <- subset(A2010, select= -c(Sector))
A2010 <- rbind(A2010, colSums(A2010))
rownames(A2010) <- c(rownames(A2010)[-length(rownames(A2010))], "Total")
A2010 <- cbind(A2010,rowSums(A2010))
colnames(A2010) <- c(colnames(A2010)[-length(colnames(A2010))], "Total")
rownames(A2017) <- A2017[,1]
A2017 <- subset(A2017, select= -c(Sector))
A2017 <- rbind(A2017, colSums(A2017))
rownames(A2017) <- c(rownames(A2017)[-length(rownames(A2017))], "Total")
A2017 <- cbind(A2017,rowSums(A2017))
colnames(A2017) <- c(colnames(A2017)[-length(colnames(A2017))], "Total")
A2010_sector_mean <- apply(A2010[,1:12],1,mean)
A2010_sector_mean
A2010_month_mean <- apply(A2010[1:9,],2,mean)
A2010_month_mean
A2017_sector_mean <- apply(A2017[,1:12],1,mean)
A2017_sector_mean
A2017_month_mean <- apply(A2017[1:9,],2,mean)
A2017_month_mean
sector<-cbind(A2010_sector_mean,A2017_sector_mean)
sector2010<-as.data.frame(t(A2010[1:9,]))
as.character(colnames(sector2010))
sector2010
sector2017<-as.data.frame(t(A2017[1:9,]))
as.character(colnames(sector2017))
sector2017
t.test(sector2010$Tucson,sector2017$`Rio Grande Valley`)
month<-cbind(A2010_month_mean,A2017_month_mean)
month2010<-as.data.frame((A2010[1:9,6:8]))
as.character(rownames(month2010))
month2010
month2010$sum<-apply(month2010,1,sum)
month2017<-as.data.frame((A2017[1:9,1:3]))
as.character(rownames(month2017))
month2017
month2017$sum<-apply(month2017,1,sum)
t.test(month2010$sum,month2017$sum)
new_A2000.2017 <- apply(t(A2000.2017[,2:13]),1,rev)
ts <- as.vector(t(new_A2000.2017))
ts
ts2 <- ts(ts,frequency = 13,start = c(2000,10))
ts2
new_A2000.2017_mean <- apply(new_A2000.2017,1,mean)
new_A2000.2017_mean
ts.plot(ts2, gpars=list(xlab="year", ylab="Apprehensions", lty=c(1:3)))
options(shiny.sanitize.errors = FALSE)
ui <- fluidPage(
titlePanel("Assignment3 Plots"),
sidebarLayout(position = "left",
sidebarPanel("Check box",
checkboxInput("comparebysector",
"compare by sector",
value = T),
checkboxInput("comparebymonth",
"compare by month",
value = T),
checkboxInput("timeseries",
"time series",
value = T)
),
mainPanel("Main panel",
fluidRow(
splitLayout(cellWidths = c("50%", "50%"),
plotOutput("graph1"),
plotOutput("graph2"))
),
tabsetPanel(
tabPanel("Compare by sector", plotOutput("graph3")),
tabPanel("Compare by month", plotOutput("graph4")),
tabPanel("time series", plotOutput("graph5")),
tabPanel("T-Test", textOutput("ttest")),
p()
)
)
))
server <- function(input, output) {
set.seed(1234)
pt3 <- reactive({
if(input$comparebysector){
return(barplot(t(sector),
beside = TRUE,
legend.text = c("2010","2017"),
main = "compare by sector"))
}
else{
return(NULL)
}
})
pt4 <- reactive({
if(input$comparebymonth){
return(barplot(t(month),
beside = TRUE,
legend.text = c("2010","2017"),
main = "compare by month"))
}
else{
return(NULL)
}
})
pt5 <- reactive({
if(input$timeseries){
return(ts.plot(ts2,gpars = list(xlab="year",ylab="appre")))
}
else{
return(NULL)
}
})
output$graph1 <- renderPlot({
barplot(A2017[1:9,13], names.arg = rownames(A2017)[1:9],
las=2,
axisnames=TRUE,
main="2017 Border Patrol Apprehensions by Sector",
border="blue",
col="red")
})
output$graph2 <- renderPlot({
barplot(A2010[1:9,13], names.arg = rownames(A2010)[1:9],
las=2,
axisnames=TRUE,
main="2010 Border Patrol Apprehensions by Sector",
border="blue",
col="yellow")
})
output$graph3 <- renderPlot({pt3()})
output$graph4 <- renderPlot({pt4()})
output$graph5 <- renderPlot({pt5()})
output$ttest <- renderPrint({
return(t.test(month2010$sum,month2017$sum))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(readr)
A2010 <- read.csv( "bp appre 2010.csv", header = TRUE, stringsAsFactors = FALSE)
A2017 <- read.csv("bp appre 2017.csv", header = TRUE, stringsAsFactors = FALSE)
A2000.2017 <- read.csv("PB monthly summaries.csv", header = TRUE, stringsAsFactors = FALSE)
rownames(A2010)<-A2010[,1]
A2010 <- subset(A2010, select= -c(Sector))
A2010 <- rbind(A2010, colSums(A2010))
rownames(A2010) <- c(rownames(A2010)[-length(rownames(A2010))], "Total")
A2010 <- cbind(A2010,rowSums(A2010))
colnames(A2010) <- c(colnames(A2010)[-length(colnames(A2010))], "Total")
rownames(A2017) <- A2017[,1]
A2017 <- subset(A2017, select= -c(Sector))
A2017 <- rbind(A2017, colSums(A2017))
rownames(A2017) <- c(rownames(A2017)[-length(rownames(A2017))], "Total")
A2017 <- cbind(A2017,rowSums(A2017))
colnames(A2017) <- c(colnames(A2017)[-length(colnames(A2017))], "Total")
A2010_sector_mean <- apply(A2010[,1:12],1,mean)
A2010_sector_mean
A2010_month_mean <- apply(A2010[1:9,],2,mean)
A2010_month_mean
A2017_sector_mean <- apply(A2017[,1:12],1,mean)
A2017_sector_mean
A2017_month_mean <- apply(A2017[1:9,],2,mean)
A2017_month_mean
sector<-cbind(A2010_sector_mean,A2017_sector_mean)
sector2010<-as.data.frame(t(A2010[1:9,]))
as.character(colnames(sector2010))
sector2010
sector2017<-as.data.frame(t(A2017[1:9,]))
as.character(colnames(sector2017))
sector2017
t.test(sector2010$Tucson,sector2017$`Rio Grande Valley`)
month<-cbind(A2010_month_mean,A2017_month_mean)
month2010<-as.data.frame((A2010[1:9,6:8]))
as.character(rownames(month2010))
month2010
month2010$sum<-apply(month2010,1,sum)
month2017<-as.data.frame((A2017[1:9,1:3]))
as.character(rownames(month2017))
month2017
month2017$sum<-apply(month2017,1,sum)
t.test(month2010$sum,month2017$sum)
new_A2000.2017 <- apply(t(A2000.2017[,2:13]),1,rev)
ts <- as.vector(t(new_A2000.2017))
ts
ts2 <- ts(ts,frequency = 13,start = c(2000,10))
ts2
new_A2000.2017_mean <- apply(new_A2000.2017,1,mean)
new_A2000.2017_mean
ts.plot(ts2, gpars=list(xlab="year", ylab="Apprehensions", lty=c(1:3)))
options(shiny.sanitize.errors = FALSE)
ui <- fluidPage(
titlePanel("Assignment3 Plots"),
sidebarLayout(position = "left",
sidebarPanel("Check box",
checkboxInput("comparebysector",
"compare by sector",
value = T),
checkboxInput("comparebymonth",
"compare by month",
value = T),
checkboxInput("timeseries",
"time series",
value = T)
),
mainPanel("Main panel",
fluidRow(
splitLayout(cellWidths = c("50%", "50%"),
plotOutput("graph1"),
plotOutput("graph2"))
),
tabsetPanel(
tabPanel("Compare by sector", plotOutput("graph3")),
tabPanel("Compare by month", plotOutput("graph4")),
tabPanel("time series", plotOutput("graph5")),
tabPanel("T-Test", textOutput("ttest")),
p()
)
)
))
server <- function(input, output) {
set.seed(1234)
pt3 <- reactive({
if(input$comparebysector){
return(barplot(t(sector),
beside = TRUE,
legend.text = c("2010","2017"),
main = "compare by sector"))
}
else{
return(NULL)
}
})
pt4 <- reactive({
if(input$comparebymonth){
return(barplot(t(month),
beside = TRUE,
legend.text = c("2010","2017"),
main = "compare by month"))
}
else{
return(NULL)
}
})
pt5 <- reactive({
if(input$timeseries){
return(ts.plot(ts2,gpars = list(xlab="year",ylab="appre")))
}
else{
return(NULL)
}
})
output$graph1 <- renderPlot({
barplot(A2017[1:9,13], names.arg = rownames(A2017)[1:9],
las=2,
axisnames=TRUE,
main="2017 Border Patrol Apprehensions by Sector",
border="blue",
col="red")
})
output$graph2 <- renderPlot({
barplot(A2010[1:9,13], names.arg = rownames(A2010)[1:9],
las=2,
axisnames=TRUE,
main="2010 Border Patrol Apprehensions by Sector",
border="blue",
col="yellow")
})
output$graph3 <- renderPlot({pt3()})
output$graph4 <- renderPlot({pt4()})
output$graph5 <- renderPlot({pt5()})
output$ttest <- renderPrint({
return(t.test(month2010$sum,month2017$sum))
})
}
shinyApp(ui = ui, server = server)
runApp('assignment3.R')
library(rsconnect)
deployApp()
runApp('assignment3.R')
setwd("$HOME/Desktop/assignment3")
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
runApp('assignment3.R')
deployApp()
y
yes
Y
runApp('assignment3.R')
runApp('assignment3.R')
